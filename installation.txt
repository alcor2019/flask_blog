*** installation Conda
update et upgrade de conda
création d'un environnement Conda avec flask
*** installation visual studio code
*** création d'un répertoire Flask_Blog
*** création d'un fichier flask_blog.py
*** test application "hello world"
-> pour connaître le fichier à lancer
*** SET FLASK_APP=flaskblog.py
-> pour passer en mode debug
*** SET FLASK_DEBUG=1

*** pour les formulaires
conda install flask_wtf

*** pour la sécurisation du site
import secrets


####################### GIT ######################

*** configuration du proxy
git config --global http.proxy http_proxy=http://CORVISIER-03356:Bu7o3e,=@55.227.148.201:3128

*** Ajout d'un remote repository pour sauvegarde
git remote add flask_blog https://github.com/alcor2019/flask_blog
*** Vérification du remote repository
git remote -v
*** pushing to the remote repository
git push flask_blog master


*** Suppression du remote repository mal nommé
git remote remove flask_blog
*** vérification des informations du remote repository
git remote show flask_blog

*** configuration user.name et user.email
git config --global user.name "alcor2019"
git config --global user.email alain.corvisier@gmail.com

###################### FLASK_ALCHEMY ####################

>>> from flaskblog import db
C:\Users\CORVISIER-03356\AppData\Local\Continuum\anaconda3\envs\flask_blog\lib\site-packages\flask_sqlalchemy\__init__.py:835: FSADeprecationWarning: SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and will be disabled by default in the future.  Set it to True or False to suppress this warning.
  'SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and '
>>> db.create_all()
>>> from flaskblog import User, Post
>>> user_1 = User(username='Corey', email='C@demo.com', password='password')
>>> db.session.add(user_1)
>>> user_2 = User(username='JohnDoe', email='jd@demo.com', password='password')
>>> db.session.add(user_2)
>>> db.session.commit()
>>> User.query.all()
[User('Corey', 'C@demo.com', 'default.jpg'), User('JohnDoe', 'jd@demo.com', 'default.jpg')]
>>> User.query.first()
User('Corey', 'C@demo.com', 'default.jpg')
>>> User.query.filter_by(username='Corey')
<flask_sqlalchemy.BaseQuery object at 0x0388C930>
>>> User.query.filter_by(username='Corey').all()
[User('Corey', 'C@demo.com', 'default.jpg')]
>>> User.query.filter_by(username='Corey').first()
User('Corey', 'C@demo.com', 'default.jpg')
>> user = User.query.filter_by(username='Corey').first()
>>> user
User('Corey', 'C@demo.com', 'default.jpg')
>>> user.id
1
>>> user = User.query.get(1)
>>> user
User('Corey', 'C@demo.com', 'default.jpg')
>>> user.posts
[]
>>> post_1 = Post(title='Blog 1', content='First Post Content', user_id=user.id)
>>> post_2 = Post(title='Blog 2', content='Second Post Content', user_id=user.id)
>>> db.session.add(post_1)
>>> db.session.add(post_2)
>>> db.session.commit()
>>> user.posts
[Post('Blog 1', '2019-09-09 14:41:34.935406'), Post('Blog 2', '2019-09-09 14:41:34.942406')]
>>> for post in user.posts:
...     print(post.title)
...
Blog 1
Blog 2
>>> post = Post.query.first()
>>> post
Post('Blog 1', '2019-09-09 14:41:34.935406')
>>> post.user_id
1
>>> post.author
User('Corey', 'C@demo.com', 'default.jpg')
>>> db.drop_all()
>>> db.create_all()
>>> User.query.all()
[]
>>> Post.query.all()
[]

############### Après la structuration du projet sous forme de paquet

>>>from forms import RegistrationForm, LoginForm
>>>from flaskblog.models import User, Post
>>>db.create_all()
>>>User.query.all()
[]


####### 6 - Python Flask Tutorial: Full-Featured Web App Part 6 - User Authentication
> Installation du paquet flask-bcrypt
conda install -c conda-forge flask-bcrypt

>>> from flask_bcrypt import Bcrypt
>>> bcrypt = Bcrypt()
>>> bcrypt.generate_password_hash('testing')
b'$2b$12$KjwM.63zaxSOSdOajla/3uqsTWei7f/26BS5XauU23dr/tb14wXZK'
>>> bcrypt.generate_password_hash('testing').decode('utf-8')
'$2b$12$Fr2PruXkDmwgIX3ON1IaQeLMVrPFgOtcqntELLqJl7B5SNIPsZ1pO'
>>> bcrypt.generate_password_hash('testing').decode('utf-8')
'$2b$12$08moaXWnCkq1tAJSXwjCNO79GESVm89NVaHNt1TNGJYclt5PedzMC'
>>> hashed_pw = bcrypt.generate_password_hash('testing').decode('utf-8')
>>> bcrypt.check_password_hash(hashed_pw, 'password')
False
>>> bcrypt.check_password_hash(hashed_pw, 'testing')
True

> Test création d'un utilisateur via l'interface WEB puis vérification en ligne de commande de la modification de la Base
>>> from flaskblog import db
>>> from flaskblog.models import User
>>> user = User.query.first()
>>> user
User('CoreyMS', 'CoreyMSchafer@gmail.com', 'default.jpg')
>>> user.password
'$2b$12$E0PsCWQNbrCG7fXXtGO6I.1RWhWehRVOQdvEErl5Xfc43yqIAcNwi'

> Tentative de création d'un second utilisateur avec les mêmes caractéristiques via l'interface WEB -> constraint
> possibilité d'inspecter les variables avec l'insertion du code PIN indiqué au lancement de l'application


sqlalchemy.exc.IntegrityError
sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: user.email
[SQL: INSERT INTO user (username, email, image_file, password) VALUES (?, ?, ?, ?)]
[parameters: ('CoreyMS', 'CoreyMSchafer@gmail.com', 'default.jpg', '$2b$12$pLVqiR5mkTfV2mh0zyxjOeSC0IpdvuXc1gcmpELyE0gQ7TERUU1H.')]
(Background on this error at: http://sqlalche.me/e/gkpj)
....
File "S:\PROJETS\Flask_Blog\flaskblog\routes.py", line 37, in register
    form = RegistrationForm()
    if form.validate_on_submit():
        hashed_password = bcrypt.generate_password_hash(form.password.data).decode('utf-8')
        user = User(username=form.username.data, email=form.email.data, password=hashed_password)
        db.session.add(user)
        db.session.commit()
Open an interactive python shell in this frame        ​flash('Your account has been created! You are now able to log in', 'success'
        return redirect(url_for('login'))
    return render_template('register.html', title='Register', form=form)
 
@app.route("/login", methods=['GET', 'POST'])
[console ready]
>>> user
User('CoreyMS', 'CoreyMSchafer@gmail.com', 'None')
>>> user.email
'CoreyMSchafer@gmail.com'
>>> 
....

> Installation du paquet flask-login

Lien utilisé par la partie 8 dans le cadre de la suppression des Posts
https://mdbootstrap.com/docs/jquery/modals/basic/

<!-- Button trigger modal -->
<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#basicExampleModal">
  Launch demo modal
</button>

<!-- Modal -->
<div class="modal fade" id="basicExampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
  aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        ...
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary">Save changes</button>
      </div>
    </div>
  </div>
</div>

Part 10 

>>> from itsdangerous import TimedJSONWebSignatureSerializer as Serializer
>>> s = Serializer('secret', 30)
>>> token = s.dumps({'user_id': 1}).decode('utf-8')
>>> token
'eyJhbGciOiJIUzUxMiIsImlhdCI6MTU3MDc4MTMxMSwiZXhwIjoxNTcwNzgxMzQxfQ.eyJ1c2VyX2lkIjoxfQ.8Vl_5N4e1mX1Kaduuk2AVH32dmk6_xpZFoYmRkya21bKrJRcD3NY2esz0QhcbFadOjz_vHosgE93BBRB4SjHrw'
>>> s.loads(token)
{'user_id': 1}
>>> s.loads(token)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\CORVISIER-03356\AppData\Local\Continuum\anaconda3\envs\flask_blog\lib\site-packages\itsdangerous\jws.py", line 205, in loads
    date_signed=self.get_issue_date(header),
itsdangerous.exc.SignatureExpired: Signature expired

Installation Pillow du module 7 (PIL)
conda install Pillow
Leçon 10 - Email and Password Reset

Installation de flask-mail
>>conda install -c conda-forge flask-mail

Pour que les lignes de code suivantes fonctionnent dans le fichier __init__.py
Il faut que je crée les variables EMAIL_USER et EMAIL_PASS correspondantes ou bien que je code ces choses en dur dans l'appli (!!! DANGER !!!)
app.config['MAIL_USERNAME'] = os.environ.get('EMAIL_USER')
app.config['MAIL_PASSWORD'] = os.environ.get('EMAIL_PASS')

La valeur sender, originellement égale à noreply@demo.com dans la fonction send_reset_email de routes.py a été remplacée par alain.corvisier@gmail.com 
    msg = Message('Password Reset Request',
                   sender='alain.corvisier@gmail.com',
                   recipients=[user.email])

les valeurs suivantes ont été mises à jour
smtp.gmail.com au lieu de smtp.googlemail.com
et 
465 au lieu de 587 en ce qui concerne le port

app.config['MAIL_SERVER'] = 'smtp.gmail.com'
app.config['MAIL_PORT'] = 465

Comme la gestion des mails par Gmail nécessite une configuration sécuritaire moins grande j'ai décidé d'opter pour la messagerie orange

app.config['MAIL_SERVER'] = 'smtp.orange.fr'
app.config['MAIL_PORT'] = 587






